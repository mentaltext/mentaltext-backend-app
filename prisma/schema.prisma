// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  phoneNumber       String              @id
  name              String
  username          String              @default(cuid())
  profilePhoto      String
  language          String // en, es, fr
  phoneCode         String // +1, +91, +44
  temporaryCode     String
  userProfile       UserProfile?
  userSettings      UserSettings?
  chats             ChatParticipants[]
  messages          Message[]
  chatSettings      ChatSettings[]
  messageStatus     MessageStatus[]
  favoriteMessages  FavoriteMessages[]
  createdGroups     GroupChat[]         @relation("createdBy")
  groupParticipants GroupParticipants[]
  blockedUsers      BlockedUsers[]      @relation("blocker")
  blockedBy         BlockedUsers[]      @relation("blocked")

  retainedMessages RetainedMessages[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model UserProfile {
  phoneNumber String     @unique
  bio         String
  lastSeen    DateTime
  status      UserStatus
  user        User       @relation(fields: [phoneNumber], references: [phoneNumber], onDelete: Cascade)
}

model UserSettings {
  userId               String  @id
  notificationsEnabled Boolean
  user                 User    @relation(fields: [userId], references: [phoneNumber], onDelete: Cascade)
}

model Chat {
  id               String             @id @default(uuid())
  lastConnectionId String?
  chatSettings     ChatSettings[]
  participants     ChatParticipants[]
  messages         Message[]
  retainedMessages RetainedMessages[]
  connections      Connections[]

  lastMessageSentAt DateTime?
}

model ChatSettings {
  chatId    String   @id
  iaEnabled Boolean  @default(false)
  updatedAt DateTime
  updatedBy String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [updatedBy], references: [phoneNumber], onDelete: Cascade)
}

model ChatParticipants {
  chatId String
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [phoneNumber], onDelete: Cascade)

  @@id([chatId, userId])
}

model Message {
  id        String
  chatId    String
  ownerId   String
  content   String
  type      String
  createdAt DateTime
  themes    String[]
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  owner     User     @relation(fields: [ownerId], references: [phoneNumber], onDelete: Cascade)

  messageStatus    MessageStatus[]
  favoriteMessages FavoriteMessages[]

  @@id([id])
}

model RetainedMessages {
  id        String
  chatId    String
  ownerId   String
  content   String
  type      String
  createdAt DateTime
  status    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  owner     User     @relation(fields: [ownerId], references: [phoneNumber], onDelete: Cascade)

  @@id([id])
}

model MessageStatus {
  messageId   String
  recipientId String
  status      String
  updatedAt   DateTime
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipient   User     @relation(fields: [recipientId], references: [phoneNumber], onDelete: Cascade)

  @@id([messageId, recipientId])
}

model FavoriteMessages {
  id        String
  userId    String
  messageId String
  createdAt DateTime
  user      User     @relation(fields: [userId], references: [phoneNumber])
  message   Message  @relation(fields: [messageId], references: [id])

  @@id([id])
  @@unique([userId, messageId], name: "unique_favorite_messages")
}

model GroupChat {
  id           String
  name         String
  createdAt    DateTime
  createdBy    String
  participants GroupParticipants[]
  creator      User                @relation("createdBy", fields: [createdBy], references: [phoneNumber])

  @@id([id])
}

model GroupParticipants {
  groupId  String
  userId   String
  joinedAt DateTime
  role     String
  group    GroupChat @relation(fields: [groupId], references: [id])
  user     User      @relation(fields: [userId], references: [phoneNumber])

  @@id([groupId, userId])
}

model BlockedUsers {
  id        String   @default(uuid())
  blockerId String
  blockedId String
  createdAt DateTime
  blocker   User     @relation("blocker", fields: [blockerId], references: [phoneNumber])
  blocked   User     @relation("blocked", fields: [blockedId], references: [phoneNumber])

  @@id([id])
  @@unique([blockerId, blockedId], name: "unique_user_blocks")
}

model Connections {
  id         String   @default(uuid())
  chatId     String
  occurredAt DateTime
  chat       Chat     @relation(fields: [chatId], references: [id])

  @@id([id])
}

// Define enums
enum GroupRole {
  MEMBER
  ADMIN
  OWNER
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

enum QueueStatus {
  PENDING
  SENT
  FAILED
}

enum MessageReadStatus {
  SENT
  DELIVERED
  READ
}

enum UserStatus {
  ONLINE
  OFFLINE
  INVISIBLE
}
